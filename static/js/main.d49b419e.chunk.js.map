{"version":3,"sources":["menuBar.js","serviceWorker.js","index.js"],"names":["SVGTriangle","react_default","a","createElement","height","width","id","dx","dy","stdDeviation","href","d","strokeWidth","fill","x","y","fontSize","MenuButton","className","this","props","link","text","React","Component","Menu","menuBar_MenuButton","Boolean","window","location","hostname","match","ReactDOM","render","menuBar","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yMAGA,SAASA,IACR,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,OAAO,MAAMC,MAAM,MAAMC,GAAG,YAChCL,EAAAC,EAAAC,cAAA,YACCF,EAAAC,EAAAC,cAAA,UAAQG,GAAG,UACVL,EAAAC,EAAAC,cAAA,gBAAcI,GAAG,IAAIC,GAAG,IAAIC,aAAa,QAG3CR,EAAAC,EAAAC,cAAA,KAAGO,KAAK,cACPT,EAAAC,EAAAC,cAAA,QAAMQ,EAAE,uBAAuBC,YAAY,IAAIC,KAAK,QACpDZ,EAAAC,EAAAC,cAAA,QAAMW,EAAE,KAAKC,EAAE,KAAKC,SAAS,MAA7B,iBAOCC,mLAEJ,OACChB,EAAAC,EAAAC,cAAA,KAAGe,UAAU,UAAUR,KAAMS,KAAKC,MAAMC,MAAOF,KAAKC,MAAME,aAHpCC,IAAMC,WAsBhBC,mLAZb,OACCxB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACH,EAAD,MACAC,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UACPL,EAAAC,EAAAC,cAACuB,EAAD,CAAYL,KAAK,IAAIC,KAAK,QAC1BrB,EAAAC,EAAAC,cAACuB,EAAD,CAAYL,KAAK,IAAIC,KAAK,kBAPZC,IAAMC,WCjBLG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,YD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d49b419e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./menus.scss\";\r\n\r\nfunction SVGTriangle() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<svg height=\"100\" width=\"200\" id=\"triangle\">\r\n\t\t\t\t<defs>\r\n\t\t\t\t\t<filter id=\"shadow\">\r\n\t\t\t\t\t\t<feDropShadow dx=\"2\" dy=\"4\" stdDeviation=\"4\"/>\r\n\t\t\t\t\t</filter>\r\n\t\t\t\t</defs>\r\n\t\t\t\t<a href=\"index.html\">\r\n\t\t\t\t\t<path d=\"M0 0 L0 100 L200 0 Z\" strokeWidth=\"0\" fill=\"red\"/>\r\n\t\t\t\t\t<text x=\"25\" y=\"35\" fontSize=\"20\">MySite</text>\r\n\t\t\t\t</a>\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nclass MenuButton extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<a className=\"menuBtn\" href={this.props.link}>{this.props.text}</a>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass Menu extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<SVGTriangle/>\r\n\t\t\t\t<div id=\"btnrow\">\r\n\t\t\t\t\t<MenuButton link=\"#\" text=\"asd\"/>\r\n\t\t\t\t\t<MenuButton link=\"#\" text=\"dsaD\"/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Menu;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport \"./menus.scss\";\nimport Menu from \"./menuBar\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Menu/>, document.getElementById(\"menubar\"));\n\nserviceWorker.unregister(); //.register() ha offline is kéne használni"],"sourceRoot":""}