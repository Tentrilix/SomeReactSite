{"version":3,"sources":["logo.svg","App.js","menuBar.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Welcome","property","react_default","a","createElement","name","App","src","logo","width","alt","React","Component","Menu","height","id","dx","dy","stdDeviation","href","d","strokeWidth","fill","x","y","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","menuBar","document","getElementById","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0PCIxC,SAASC,EAAQC,GAAY,OAC5BC,EAAAC,EAAAC,cAAA,kBAAUH,EAASI,UAgBLC,mLAXb,OACCJ,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,IAAMC,MAAO,IAAKC,IAAI,QAChCR,EAAAC,EAAAC,cAACJ,EAAD,CAASK,KAAK,QACdH,EAAAC,EAAAC,cAACJ,EAAD,CAASK,KAAK,QACdH,EAAAC,EAAAC,cAACJ,EAAD,CAASK,KAAK,gBAPAM,IAAMC,eCqBTC,mLANb,OAlBAX,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKU,OAAO,MAAML,MAAM,MAAMM,GAAG,YAChCb,EAAAC,EAAAC,cAAA,YACCF,EAAAC,EAAAC,cAAA,UAAQW,GAAG,UACVb,EAAAC,EAAAC,cAAA,gBAAcY,GAAG,IAAIC,GAAG,IAAIC,aAAa,QAG3ChB,EAAAC,EAAAC,cAAA,KAAGe,KAAK,cACPjB,EAAAC,EAAAC,cAAA,QAAMgB,EAAE,uBAAuBC,YAAY,IAAIC,KAAK,QACpDpB,EAAAC,EAAAC,cAAA,QAAMmB,EAAE,KAAKC,EAAE,KAAKC,SAAS,MAA7B,oBAOcd,IAAMC,WCTLc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,YACjDJ,IAASC,OAAO9B,EAAAC,EAAAC,cAACgC,EAAD,MAASF,SAASC,eAAe,SDwH3C,kBAAmBE,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.896c0359.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nfunction Welcome(property) { return (\r\n\t<p>Hello {property.name}</p>\r\n);}\r\n\r\nclass App extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<img src={logo} width={128} alt=\"pic\"/>\r\n\t\t\t\t<Welcome name=\"asd\"/>\r\n\t\t\t\t<Welcome name=\"dsa\"/>\r\n\t\t\t\t<Welcome name=\"fas\"/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport \"./menus.css\";\r\n\r\nfunction svgTriangle() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<svg height=\"100\" width=\"200\" id=\"triangle\">\r\n\t\t\t\t<defs>\r\n\t\t\t\t\t<filter id=\"shadow\">\r\n\t\t\t\t\t\t<feDropShadow dx=\"2\" dy=\"4\" stdDeviation=\"4\"/>\r\n\t\t\t\t\t</filter>\r\n\t\t\t\t</defs>\r\n\t\t\t\t<a href=\"index.html\">\r\n\t\t\t\t\t<path d=\"M0 0 L0 100 L200 0 Z\" strokeWidth=\"0\" fill=\"red\"/>\r\n\t\t\t\t\t<text x=\"25\" y=\"35\" fontSize=\"20\">MySite</text>\r\n\t\t\t\t</a>\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nclass Menu extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\tsvgTriangle()\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Menu;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./menus.css\";\nimport App from \"./App\";\nimport Menu from \"./menuBar\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Menu/>, document.getElementById(\"menubar\"));\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister(); //.register() ha offline is kéne használni"],"sourceRoot":""}